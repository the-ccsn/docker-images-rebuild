name: Build and Push Docker Images with Avahi

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base_image:
          - debian:bookworm
          - ubuntu:22.04
          - alpine:3.20
    steps:
      - name: Check if base image updated
        id: check
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: ${{ matrix.base_image }}
          image: ghcr.io/${{ github.repository_owner }}/$(echo ${{ matrix.base_image }} | cut '-d:' '-f1' | tr '/' '-')

      - name: Save outputs
        id: save
        run: |
          echo "needs_build=${{ steps.check.outputs.needs_build }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.check.outputs.digest }}" >> $GITHUB_OUTPUT
          echo "base_image=${{ matrix.base_image }}" >> $GITHUB_OUTPUT
    outputs:
      needs_build: ${{ steps.save.outputs.needs_build }}
      digest: ${{ steps.save.outputs.digest }}
      base_image: ${{ steps.save.outputs.base_image }}

  build:
    needs: check-updates
    if: needs.check-updates.outputs.needs_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse image name and tag
        id: parse
        run: |
          BASE="${{ needs.check-updates.outputs.base_image }}"
          NAME=$(echo "$BASE" | cut -d: -f1 | tr '/' '-')
          TAG=$(echo "$BASE" | cut -d: -f2)
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate Dockerfile
        id: genfile
        run: |
          echo "FROM ${{ needs.check-updates.outputs.base_image }}" > Dockerfile
          cat >> Dockerfile <<'EOF'
          RUN apt-get update && apt-get install -y avahi-daemon avahi-utils libnss-mdns && rm -rf /var/lib/apt/lists/* || \
              (apk add --no-cache avahi dbus && true)
          EOF

          echo "dockerfile<<EOF" >> $GITHUB_OUTPUT
          cat Dockerfile >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Docker image with Avahi
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:${{ steps.parse.outputs.tag }} \
            -t ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:${{ steps.parse.outputs.tag }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:latest

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-updates.outputs.base_image }}-${{ needs.check-updates.outputs.digest }}
          name: "Update ${{ needs.check-updates.outputs.base_image }}"
          body: |
            ### 📦 New Docker Image
            - **Base Image**: `${{ needs.check-updates.outputs.base_image }}`
            - **Digest**: `${{ needs.check-updates.outputs.digest }}`
            - **Published at**: ${{ github.run_started_at }}

            Images pushed:
            - `ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:${{ steps.parse.outputs.tag }}`
            - `ghcr.io/${{ github.repository_owner }}/${{ steps.parse.outputs.name }}:latest`

            ### 📝 Dockerfile used for build
            ```Dockerfile
            ${{ steps.genfile.outputs.dockerfile }}
            ```

  cleanup:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Cleanup old Debian versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: debian
          package-type: container
          min-versions-to-keep: 5

      - name: Cleanup old Ubuntu versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: ubuntu
          package-type: container
          min-versions-to-keep: 5

      - name: Cleanup old Alpine versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: alpine
          package-type: container
          min-versions-to-keep: 5
